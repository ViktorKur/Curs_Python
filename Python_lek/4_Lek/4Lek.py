# def f(x):
#   return x*x
# a=f
# print(f(5))
# print(a(5))
#########################################
#Calkulator function
# def calk1 (a,b):
#   return a+b

# # calk1 = lambda a,b: a+b # Лямбда функция 

# def calk2 (a,b):
#   return a*b
# def math (op,a,b):
#   print (op(a,b))
  
# # math(calk1, 5, 5) 
# math(lambda a,b: a+b, 5, 5) 

# #########################################


# Всписке хранятся числа. Нужновы братьтолько чётные числа и составить
# список пар (число; квадрат числа). 
# Пример: 1 2 3 5 8 15 23 38 
# Получить: [(2, 4), (8, 64), (38, 1444)]

# Мой вариант программы
# i=[1,2,3,5,8,15,23,38]
# z=[]
# for y in i:
#   if y%2==0:
#     z.append((y,y*y))
# print(z)      

######################################################################
# # Вариант преподователя с использованием Ляьмбда функции
# # def select (f,col):
# #   return [f(x) for x in col]
# # def where(f,col):
# #   return [x for x in col if f(x)] 
# data = [1,2,3,5,8,15,23,38]
# # res = select(int, data)
# # print (res)
# res = map(int, data)  #Использование функции map
# # res = where (lambda x: x%2==0, res) # теперь вместо функции where будем использовать внутр фун. filter
# # print (res)
# res = filter(lambda x: x%2==0, res)
# # res = list(select(lambda x: (x,x**2), res))
# res = list(map(lambda x: (x,x**2), res)) #Использование функции map вместо функции list
# print (res)

#######################################################################
# Использование функции map
# list_1 = [x for x in range(1,20)]
# print(list_1)

# list_1 = list(map(lambda x: x+10, list_1))
# print (list_1)

# Задача:Cклавиатурывводитсянекийнаборчисел,
# вкачестверазделителя используетсяпробел.
# Этотнаборчиселбудетсчитанвкачествестроки.
# Как превратить list строк в list чисел?

# data = '1 2 3 5 8 15 23 38' 
# print(data)
# data = list(map(int ,data.split()))
# print(data)

# Результатработы map()—этоитератор.Поитераторуможнопробежатьсятолько 
# одинраз.Чтобыработатьнесколькоразсоднимиданными,нужносохранить данные
# (например, в виде списка).

########################################################
# Использование функции filter 
# Функцияfilter()применяетуказаннуюфункциюккаждомуэлементу 
# итерируемогообъектаивозвращаетитераторстемиобъектами,
# длякоторых функция вернула True.

# data = [15,65,9,36,175]
# res=list(filter(lambda x: x%10==5,data))
# print(res) 

###############################################################
# Использование функции zip
# Функци яzip() применяется к набору итерируемых объектов и 
# возвращает итератор с кортежами из элементов входных данных

# users = ['user1', 'user2', 'user3', 'user4', 'user5'] 
# ids = [4, 5, 9, 14, 7] 
# salary = [111, 222, 333]
# data = list(zip(users, ids))
# print(data)
# data = list(zip(users, ids, salary)) #Функция zip () пробегает по минимальному входящему набору:
# print(data) # [('user1', 4, 111), ('user2', 5, 222),('user3', 333)]

#############################################################
# Использование функции enumerate() 
# Функция enumerate() применяется к итерируемому объекту и 
# возвращает новый итератор с кортежами из индекса и элементов входных данных.

# users = ['user1', 'user2', 'user3'] 
# data = list(enumerate(users)) 
# print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]

################################################################

# Работа с файлами:
# Примеры использования различных режимов в коде:
#   1.Режим a - дозапись запись данных в файл который уже существует:
# colors = ['red', 'green', 'blue'] 
# data = open('file.txt', 'a', encoding='utf-8') # здесь указываем режим,в котором будем работать и encoding='utf-8' - это тип кодировки
# data.writelines(colors) # разделителей не будет 
# data.close() #data.close() — используется для закрытия файла, чтобы разорвать подключение файловой переменной с файлом на диске.

#    #Ещё один способ записи данных в файл с помощью функ with с автоматическим закрытием файла:
# with open('file.txt', 'w') as data: 
#   data.write('line 1\n') 
#   data.write('line 2\n')
  
#   # 2.Режим r  - Чтение данных из файла:
# path = 'file.txt' 
# data = open(path, 'r') 
# for line in data: 
#     print(line) 
# data.close()

#   # 3. Режим w - запись данных в файл как уже созданый 
#   # так и создающийся автоматически при записи
# colors = ['red', 'green', 'blue'] 
# data = open('file.txt', 'w') 
# data.writelines(colors)    # разделителей не будет 
# data.close()

############################################################
# Модуль os 
# Модуль os предоставляет множество функций для работы с операционной 
# системой, причем ихповедение, как правило, независит от ОС, 
# поэтому программы остаются переносимыми. Длятого,чтобы начать работать 
# сданным модулем необходимо его импортировать в свою программу: 
#   import os  
# Познакомимся с базовыми функциями данного модуля: 
##   os.chdir(path) - смена текущей директории. 
# пример использования
# import os 
# os.chdir('C:/Users/79190/PycharmProjects/GB')

    ## os.getcwd()- текущая рабочая директория
    
# import os 
# print(os.getcwd())   # 'D:\Education_GEEK_BRAIN\Seminar_Folder\Python_projects\Python_lek\4_Lek\4Lek.py'

 # os.path -является вложенным модулем в модуль os и реализует некоторые 
 # полезные функции для работы с путями, такие как:
 #   ○os.path.basename(path) - базовое имя пути
 
# import os 
# print(os.path.basename('D:\Education_GEEK_BRAIN\Seminar_Folder\Python_projects\Python_lek\4_Lek\4Lek.py'))# '4Lek.py'

# os.path.abspath(path)- возвращает нормализованныйабсолютный путь.

# import os 
# print(os.path.abspath('Lek.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py'

###########################################################################

# Модуль shutil
# Модуль shutil содержит набор функций высокого уровня для обработки файлов,
# групп файлов, и папок. В частности, доступные здесь функции позволяют 
# копировать, перемещать и удалять файлы и папки.Часто используется вместе 
# с модулем os. Длятого,чтобы начать работать с данным модулем необходимо его 
# импортировать в свою программу: 
#   import shutil

# Познакомимся с базовыми функциями данного модуля: 
#   shutil.copyfile(src, dst) - копирует содержимое (ноне метаданные) файла src в файл dst. 
#   shutil.copy(src, dst) - копирует содержимое файлаsrc в файлили папкуdst. 
#   shutil.rmtree(path) - Удаляет текущую директорию ивсе поддиректории; 
#   path должен указывать на директорию, а не на символическую ссылку.
